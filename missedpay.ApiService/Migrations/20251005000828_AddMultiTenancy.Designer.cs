// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace missedpay.ApiService.Migrations
{
    [DbContext(typeof(MissedPayDbContext))]
    [Migration("20251005000828_AddMultiTenancy")]
    partial class AddMultiTenancy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("missedpay.ApiService.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    b.PrimitiveCollection<int[]>("Attributes")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "attributes");

                    b.Property<string>("Authorisation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_authorisation");

                    b.Property<string>("Credentials")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_credentials");

                    b.Property<string>("FormattedAccount")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "formatted_account");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "meta");

                    b.Property<string>("Migrated")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_migrated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("missedpay.ApiService.Models.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_account");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "amount");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "balance");

                    b.Property<string>("Category")
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_connection");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Merchant")
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "merchant");

                    b.Property<string>("Meta")
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "meta");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "AccountId");

                    b.HasIndex("TenantId", "Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("missedpay.ApiService.Models.Account", b =>
                {
                    b.OwnsOne("missedpay.ApiService.Models.Balance", "Balance", b1 =>
                        {
                            b1.Property<string>("AccountId")
                                .HasColumnType("text");

                            b1.Property<decimal?>("Available")
                                .HasColumnType("numeric")
                                .HasAnnotation("Relational:JsonPropertyName", "available");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "currency");

                            b1.Property<decimal>("Current")
                                .HasColumnType("numeric")
                                .HasAnnotation("Relational:JsonPropertyName", "current");

                            b1.Property<decimal?>("Limit")
                                .HasColumnType("numeric")
                                .HasAnnotation("Relational:JsonPropertyName", "limit");

                            b1.Property<bool?>("Overdrawn")
                                .HasColumnType("boolean")
                                .HasAnnotation("Relational:JsonPropertyName", "overdrawn");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.HasAnnotation("Relational:JsonPropertyName", "balance");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("missedpay.ApiService.Models.Connection", "Connection", b1 =>
                        {
                            b1.Property<string>("AccountId")
                                .HasColumnType("text");

                            b1.Property<int>("ConnectionType")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "connection_type");

                            b1.Property<string>("Id")
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "_id");

                            b1.Property<string>("Logo")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "logo");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "name");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.HasAnnotation("Relational:JsonPropertyName", "connection");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("missedpay.ApiService.Models.RefreshedTimestamps", "Refreshed", b1 =>
                        {
                            b1.Property<string>("AccountId")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("Balance")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "balance");

                            b1.Property<DateTime?>("Meta")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "meta");

                            b1.Property<DateTime?>("Party")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "party");

                            b1.Property<DateTime?>("Transactions")
                                .HasColumnType("timestamp with time zone")
                                .HasAnnotation("Relational:JsonPropertyName", "transactions");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.HasAnnotation("Relational:JsonPropertyName", "refreshed");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("Connection")
                        .IsRequired();

                    b.Navigation("Refreshed")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
